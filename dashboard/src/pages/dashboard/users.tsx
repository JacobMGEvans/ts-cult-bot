import { GetServerSideProps, type NextPage } from 'next';
import { unstable_getServerSession as getServerSession } from 'next-auth';
import { authOptions } from '../api/auth/[...nextauth]';
import Head from 'next/head';
import { useHydratedSession } from '@utils/customHooks';
import { NextPageWithLayout } from '../_app';
import { PageLayout } from '@components/PageLayout';
import { api } from '@utils/api';
import React from 'react';
import clsx from 'clsx';

const Users: NextPageWithLayout = () => {
  const session = useHydratedSession();

  const users = api.users.getAllUsers.useQuery();

  console.log('users', users.data);

  return (
    <>
      <Head>
        <title>Dashboard - Theo&apos;s Typesafe Cult</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h2>Users!</h2>

      <div className="">
        {users?.data?.map((user, index) => {
          return (
            <div
              key={user.id}
              className={clsx(
                'flex h-14 flex-row items-center',
                index % 2 === 1 && 'bg-slate-600'
              )}
            >
              {/* <div className="w-16 flex items-center justify-center">
                     {user.image && <img src={user.image} alt={user.name ? user.name : 'user profile image'} className="rounded-full w-10 h-10" />}
                  </div> */}
              <div className="grow px-2">{user.name}</div>
              <div className="flex w-24 justify-center">{user.role.name}</div>
            </div>
          );
        })}
      </div>
    </>
  );
};

Users.getLayout = function getLayout(page: React.ReactElement) {
  return (
    <>
      <PageLayout>{page}</PageLayout>
    </>
  );
};

export default Users;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (!session) {
    return {
      redirect: {
        permanent: false,
        destination: `/`,
      },
    };
  }
  return {
    props: {
      session: session,
    },
  };
};
